//change this for a different TC5 git
def gitTC = 'https://github.com/EternalBlueFlame/Traincraft-5.git'
def branch = 'TC4.5-1.7.10'

def cloneDir = "${buildDir}/libs/TC/"
import org.apache.tools.ant.taskdefs.condition.Os
buildscript {
    repositories {

        maven {
            url "https://repo1.maven.org/maven2"
        }

        maven {
            name = "forge"
            url = "https://maven.minecraftforge.net/"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath ('com.anatawa12.forge:ForgeGradle:1.2-1.1.+') {
            changing = true
        }
    }
}

apply plugin: 'forge'
apply plugin: 'idea'

version = "1.0"
group= "ebf.squared"
archivesBaseName = "TCSquared"

sourceCompatibility = targetCompatibility = "1.7"
compileJava { sourceCompatibility = targetCompatibility = "1.7" }

minecraft {
	version = "1.7.10-10.13.4.1614-1.7.10"
	runDir = "run"
}

// Task to run the Gradle build in the cloned repo
task buildClonedRepo(type: Exec) {
    //first, download or update the repo
    doFirst {
        if (!file(cloneDir).exists()) {
            mkdir(cloneDir)
            commandLine 'git', 'clone', '--branch', branch, gitTC, cloneDir
            workingDir cloneDir
        } else {
            workingDir cloneDir
            commandLine 'git', 'pull'
        }
    }
    //next, add the dependence source directory, and add execute perms for linux/mac
    sourceSets.main.java.srcDirs += file("${cloneDir}/src/main/java")
    if (Os.isFamily(Os.FAMILY_UNIX)) {
        commandLine 'chmod', 'a+rwx', './gradlew'
    }
    //last, compile the dependency
    doLast {
        if (Os.isFamily(Os.FAMILY_WINDOWS)) {
            commandLine 'cmd', '/c', 'gradlew.bat', 'build'
        }
        else {
            commandLine './gradlew', 'setupDecompWorkspace --refresh-dependencies idea'
        }
    }
}


sourceSets {
    main {
        resources {
            // Include the cloned assets folder as a resource directory
            srcDir "${cloneDir}/src/main/resources"
        }
    }
}

repositories {
    maven {
        name "ChickenBones"
        url "http://chickenbones.net/maven/"
    }
    maven { 
        url = "http://maven.cil.li/"
    }
}

dependencies {
    repositories {
        ivy {
            name "BuildCraft"
            artifactPattern "http://www.mod-buildcraft.com/releases/BuildCraft/[revision]/[module]-[revision](-[classifier]).[ext]"
        }
    }

    compile "li.cil.oc:OpenComputers:MC1.7.10-1.5.+:api"
    compile name: "buildcraft", version: "7.1.16", classifier: "dev"
    compile "codechicken:CodeChickenLib:1.7.10-1.1.3.138:dev"
    compile "codechicken:CodeChickenCore:1.7.10-1.0.7.46:dev"
    compile "codechicken:NotEnoughItems:1.7.10-1.0.5.110:dev"
}

afterEvaluate {
    tasks["idea"].dependsOn.add(buildClonedRepo);
    tasks["build"].dependsOn.add(buildClonedRepo);
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
                
        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }
        
    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}
